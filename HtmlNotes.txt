1. Script Tag - 

    <Script defer src='index.js'/>
    properties

    defer - It is downloaded in the background and loads the Javacsript after HTML parsing is complete
    
    async - It is downloaded in the background and  executes as soon as it is available 

    *Scripts placed inside body tag executes after HTML content is loaded
    
2. HTML 5 features -
    Audio video tag
    Header Footer tag
    Nav tag

3. Elements vs tags -
    Tags -> <span>, div tag executes
    Elements -> It holds the content of the tag

4. Comments -> 
    <!-- This is a comment -->

5. Defer,Async attributes in script tag -

    <script defer src="index.js"></script>
        * Loads the script Asynchronously (with HTML parsing)
        * Execution is deferred until HTML is fully parsed
        * Ensures scripts are executed in given order

    <script async src="index.js"></script>
        * Loads the script Asynchronously (with HTML parsing)
        * Execution starts as soon as the script is downlaoded, it doesn't waits for HTML parsing
        * Execution order of scripts are not guaranteed

6.* window.onload vs DOMContentLoaded event -

    onload -
        * Executes only after entire page and resources are loaded

    DOMContentLoaded -
        * Executes as soon as the HTML is fully parsed and DOM is built
          It doesn't waits for external resources.

        *  example 
                <script src="async.js" async></script>
                <script src="defer.js" defer></script>

                <script>
                document.addEventListener("DOMContentLoaded", () => {
                    console.log("DOM fully loaded!");
                });

                window.onload = () => {
                    console.log("All resources loaded!");
                };
                </script>

               **   async.js (may execute at any time after loading).
                    DOM parsing completes.
                    defer.js executes (in order before DOMContentLoaded).
                    DOMContentLoaded event fires.
                    window.onload event fires. 
                    
7. Position Static, Relative, Absolute, Fixed & Sticky
    * Relative - 
        This property allows for adding top left bottom etc porperty to the given element
        The element does not comes out of normal flow, it remains at its original position
        
    * Absolute -
        The element is positioned relative to its nearest positioned ancestor, if none of the ancestors are
        positioned relative / absolute / fixed it looks for parents position (HTML)
        Element comes out of the normal flow and does not remains at its normal position

    * Fixed -
        The element is fixed wrt VIEWPORT
        Element comes out of the normal flow
        It remains fixed even if the Container containing it ends
        If the element is position fixed and outside the VIEWPORT it will never shown on screen 
        since it is positioned wrt VIEWPORT
        
    * Sticky -
        It is an hybrid of Relative and Fixed
        It will acts as relative initially and when it reaches the threshold values of top,bottom etc it 
        becomes Fixed
        It is fixed within the container containing it and does not moves outside
        When it leaves its container, it sticks to the threshold position

8. Importing FONTS in HTML/React -
    
    1. Using Link tag -

        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Yuji+Mai&display=swap"
            rel="stylesheet"/>

    2. Using @import -

        Import the CSS in style.css file
        @import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Yuji+Mai&display=swap');

    3. Using @font-face rule -
        It is used for using Local fonts and Custom fonts

        @font-face{
            font-family: "MyFonts";
            src:url('MagazineLetter.ttf') format("truetype");
        }
        * {
            margin: 0%;
            padding: 0;
            font-family: "MyFonts",Georgia;
        }

9. DocType of HTML -

    It stands for Document type declaration
    It tells the browser about the type and version of the HTML
    DocType declaration tells the browser to render the page in STANDARD MODE ensuring latest web standards
    are follwed, If DocType declaration is missing browser renders it in QUIRKS MODE which may cause 
    inconsistencty while rendering

    *Current HTML version is HTML5
    *document.doctype gives some information about doctype
    *example - If doctype is missing CSS margin padding border may not work as intended

10. Anchor Tag -

    <a href="https://google.com" onclick="handleReload()">Google</a>

    *href= refers to the url which anchor tag will point to
    *target= _blank opens the link in new tab/window
    *To stop reloading preventDefault action
    *To scroll to particular section we can use href="#idToScroll", we cannot use class, it only works for ID
    *To style anchor tag -
        to change underline color - text-decoration-color:red;
        to change underline - text-decoration-line:overline;
        to remove the decoration - text-decoration :none;

11. How to center a div -

    1. using position relative & absolute -
        body {
            width: 100%;
            height: 100vh;
            position: relative;
            }
        .center {
            background-color: darkorange;
            width: 200px;
            height: 200px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            }
    2. Using margin auto/text-align center - horizontally centers -
        .parent{
            text-align:center;
            margin: auto;
        }
    3. using display grid -
        .parent{
            display:grid;
            place-items:center;
        }
    4. using display flex -
        .parent{
            display: flex;
            align-items: center;
            justify-content: center;
        }
    
12. Display Flex -

    justify-content - HORIZONTALLY (parent property)
    flex: flex-grow flex-shrink flex-basis; (child property)
    * order:2 (child property) - sets the order of child elements

13. Simulate onclick using CSS -
    Directly simulation is not possible but we can mimic of clicking using btn:active,
    btn:focus etc 

14. CORS -

    Cross Origin Resource Sharing
    CORS is a server-side concept that allows or restricts cross-origin requests based on headers.
    HTML itself does not directly manage CORS. You use JavaScript to make cross-origin requests, 
    and the browser checks if the CORS policy is followed
    In backend -
    Access-Control-Allow-Origin: * ( All )
    Access-Control-Allow-Origin: https://example.com
    Access-Control-Allow-Methods: GET, POST, PUT
    Access-Control-Allow-Headers: Content-Type, Authorization
    Access-Control-Allow-Credentials: true Indicates whether the browser should include credentials
    (like cookies or HTTP authentication) in cross-origin requests. Default is false

15. Display grid -

16.* Meta Tags -

    Meta tags are metadata i.e it contains data about data of an webpage
    It gives information about the DESCRIPTION , AUTHOR details, KEYWORDS, CHARSET and 
    VIEWPORT settings of a page
    It is included in the Head tag of the html

    <meta name="author" content="John Doe">
    <meta name="description" content="Learn about meta tags and how they work with media queries to make responsive webpages.">
    <meta name="keywords" content="HTML, meta tags, media queries, responsive design">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    * meta name ="viewport" content="width=device-width" tells the browser to open the webpage 
      in device width so that it can be made responsive