1. Script Tag - 

    <Script defer src='index.js'/>
    properties

    defer - It is downloaded in the background and loads the Javacsript after HTML PARSING is complete
    
    async - It is downloaded in the background and  executes as soon as it is available 

    *Scripts placed inside body tag executes after HTML content is loaded
    
2. HTML5 & CSS3 Features -

    HTML5 Features -

        1. Addition of semantic elements like - nav , footer, header, section, article, Audio, Video 
            tags etc
        
        2. Addition of new input types such as tel, date, number etc

        3. Canvas APIs  <canvas> for rendering simple charts and visual effects

    CSS3 Features -

        1. Addition of custom variables -

            :root {
            --primary-color: #3498db;
            }
            .btn {
            background-color: var(--primary-color);
            }

        2*. Addition of Pseudo classes and Pseudo elements -

            Pseudo-classes(:) - Used to define special state of an element example hover, active, focus

            Pseudo-elements(::) - lets you style part of an element like ::before,::after,::placeholder,
            They dont change the original element rather they allow to style around it

        3. Addition of media queries for creating and designing responsive designs
            @media (max-width: 768px) {
                .sidebar {
                    display: none;
                }
            }

3. Elements vs tags -

    Tags -> syntax used to define an HTML element like <div> <span> etc

    Elements -> It holds the content of the tag i.e Tag + Content

4. Comments -> 
    <!-- This is a comment -->

5. Defer , Async attributes in script tag -

    <script defer src="index.js"></script>
        * Loads the script Asynchronously (with HTML parsing)
        * Execution is deferred until HTML is fully parsed but other resources (like images or CSS files) 
          might still be loading.
        * Ensures scripts are executed in given order

    <script async src="index.js"></script>
        * Loads the script Asynchronously (with HTML parsing)
        * Execution starts as soon as the script is downlaoded, it doesn't waits for HTML parsing
        * Execution order of scripts are not guaranteed

6.* window.onload vs DOMContentLoaded event -

    onload -
        * Executes only after entire page and resources are loaded

    DOMContentLoaded -
        * DOMContentLoaded fires, when the HTML is fully parsed and the DOM is fully built, 
          but other resources (like images or CSS files) might still be loading.

        *  example 
                <script src="async.js" async></script>
                <script src="defer.js" defer></script>

                <script>
                document.addEventListener("DOMContentLoaded", () => {
                    console.log("DOM fully loaded!");
                });

                window.onload = () => {
                    console.log("All resources loaded!");
                };
                </script>

               **   async.js (may execute at any time after loading).
                    DOM parsing completes.
                    defer.js executes (in order before DOMContentLoaded).
                    DOMContentLoaded event fires.
                    window.onload event fires. 
                    
7. Position Static, Relative, Absolute, Fixed & Sticky

    * Relative - 

        This property allows for adding top left bottom etc property to the given element
        The element does not comes out of normal flow, it remains at its original position
        
    * Absolute -

        The element is positioned relative to its nearest positioned ancestor, if none of the ancestors are
        positioned relative / absolute / fixed it looks for parents position (HTML)
        Element comes out of the normal flow and does not remains at its normal position

    * Fixed -

        The element is fixed wrt VIEWPORT
        Element comes out of the normal flow
        It remains fixed even if the Container containing it ends
        If the element is position fixed and outside the VIEWPORT it will never shown on screen 
        since it is positioned wrt VIEWPORT
        
    * Sticky -

        It is an hybrid of Relative and Fixed
        It will acts as relative initially and when it reaches the threshold values of top,bottom etc it 
        becomes Fixed
        It is fixed within the container containing it and does not moves outside
        When it leaves its container, it sticks to the threshold position

8. Importing FONTS in HTML/React -
    
    1. Using Link tag -

        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Yuji+Mai&display=swap"
            rel="stylesheet"/>

    2. Using @import -

        Import the CSS in style.css file
        @import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Yuji+Mai&display=swap');

    3. Using @font-face rule -

        It is used for using Local fonts and Custom fonts

        @font-face{
            font-family: "MyFonts";
            src:url('MagazineLetter.ttf') format("truetype");
        }
        * {
            margin: 0%;
            padding: 0;
            font-family: "MyFonts",Georgia;
        }

9. DocType of HTML -

    It stands for Document type declaration

    It tells the browser about the type and version of the HTML

    DocType declaration tells the browser to render the page in STANDARD MODE ensuring latest web standards
    are follwed, If DocType declaration is missing browser renders it in QUIRKS MODE which may cause 
    inconsistencty while rendering

    *Current HTML version is HTML5
    *document.doctype gives some information about doctype

    *example - If doctype is missing CSS margin padding border may not work as intended

10. Anchor Tag -

    <a href="https://google.com" onclick="handleReload()">Google</a>

    *href= refers to the url which anchor tag will point to
    *target= _blank opens the link in new tab/window
    *To stop reloading preventDefault action
    *To scroll to particular section we can use href="#idToScroll", we cannot use class, it only works for ID
    *To style anchor tag -
        to change underline color - text-decoration-color:red;
        to change underline - text-decoration-line:overline;
        to remove the decoration - text-decoration :none;

11. How to center a div -

    1. using position relative & absolute -
        body {
            width: 100%;
            height: 100vh;
            position: relative;
            }
        .center {
            background-color: darkorange;
            width: 200px;
            height: 200px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            }
    2. Using margin auto/text-align center - horizontally centers -
        .parent{
            text-align:center;
            margin: auto;
        }
    3. using display grid -
        .parent{
            display:grid;
            place-items:center;
        }
    4. using display flex -
        .parent{
            display: flex;
            align-items: center;
            justify-content: center;
        }
    
12. Display Flex -

    It provides a layout Model for clean and easy arrangements of elements within a container
    It provides 1-D layout
    justify-content - HORIZONTALLY (parent property)
    flex: flex-grow flex-shrink flex-basis; (child property)
    
    * order:2 (child property) - sets the order of child elements

13. Simulate onclick using CSS -
    Directly simulation is not possible but we can mimic of clicking using btn:active,
    btn:focus etc 

14. CORS -

    Cross Origin Resource Sharing
    CORS is a server-side concept that allows or restricts cross-origin requests based on headers.
    HTML itself does not directly manage CORS. You use JavaScript to make cross-origin requests, 
    and the browser checks if the CORS policy is followed
    In backend -

    Access-Control-Allow-Origin: * ( All )
    Access-Control-Allow-Origin: https://example.com

    Access-Control-Allow-Methods: GET, POST, PUT
    Access-Control-Allow-Headers: Content-Type, Authorization

    Access-Control-Allow-Credentials: true Indicates whether the browser should include credentials
    (like cookies or HTTP authentication) in cross-origin requests. Default is false

15. Display Grid -

    It offers row column based layouts and has 2-dimensional layout

    display:grid
    * grid-template-areas: -> Creates Named Areas of 3 Rows 2 Columns
          "header header"
          "sidebar main"
          "footer footer";
    * grid-template-rows: 8vh 1fr 10vh; - Creates Rows 

    * grid-template-columns: 15vw 1fr; - Creates Columns 

    * grid-area: header;

    * grid-template-columns: repeat(auto-fill, minmax(200px, 1fr))

    * grid-column-start: 2; -> Used to place an grid item manually to a position
      grid-column-end: 4;
      grid-row-start: 1;
      grid-row-end: 3;

    * For Modern Layouts -  
        .dashboard {
            display: grid;
            grid-template-areas:
            "header header"
            "sidebar main"
            "footer footer";
            grid-template-rows: 8vh 1fr 10vh;
            grid-template-columns: 15vw 1fr;
            height: 100vh;
      }
      .header {
            grid-area: header;
            background-color: crimson;
      }
      .sidebar {
            grid-area: sidebar;
            background-color: aquamarine;
      }
      .main {
            grid-area: main;
            padding: 1rem;
            background-color: deeppink;
            overflow-y: auto;
      }
      .footer {
            grid-area: footer;
            background-color: hotpink;
      }

16.* Meta Tags -

    Meta tags are metadata i.e it contains data about data of an webpage
    It gives information about the DESCRIPTION , AUTHOR details, KEYWORDS, CHARSET and 
    VIEWPORT settings of a page
    It is included in the HEAD tag of the html

    <meta name="author" content="John Doe">
    <meta name="description" content="Learn about meta tags and how they work with media queries to make responsive webpages.">
    <meta name="keywords" content="HTML, meta tags, media queries, responsive design">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    * meta name ="viewport" content="width=device-width" tells the browser to open the webpage 
      in device width so that it can be made responsive

17. CSS Specificity - 

   It is an algorithm used by browsers to determine CSS declaration which is more relevant to an element
   It calculates weight of a html element to determine which rule to apply. 

   specific weight - ( ID , Class , TagName )

   *Id > Class > TagName

   * is() has() not() pseudo classes doesn't add value while calculating specific weight but the values
   passed inside them, its specifc weight is added
   example - is(.myClass) - (0,1,0)

   *Inline CSS has the highest Specficity

   *If Specficity clashes , lastest css is given more preference

   * !important -  It reverses the specificity of the element

18. Box Model -

   It defines how elements are structured and positioned in a web page
   It consists of four main components ->
   content
   border
   margin
   padding

   box-sizing ->  default content-box -> means height and width applies only to content area. 
                  border box -> means box height & width contains border and padding but not margin

19. z-index - 

   It is related to its parent's z-index
   used to displace elements on the z-axis i.e in or out of the screen.
   It is used to define the order of elements if they overlap with each other.

    * Child z-index is relative to its parent’s stacking context, and cannot "escape" or overlap higher 
      stacking contexts.
    
    * z-index only works if the element has a non-static position.
        The values that work:
        position: relative
        position: absolute
        position: fixed
        position: sticky
        An element with position: relative or absolute and a z-index creates a new stacking context.
        Children inside it are layered only within that context

20. Block vs inline -

    A block-level element always starts on a new line and stretches out to the left and right
    as far as it can
    An inline element does not start on a new line and only takes up as much width as necessary.

    * We cannot give height and width to an inline element whereas it is possible in block element case

21*. Cross Browser Compatibilty Issues -

    1. Using gap in a flex layout for spacing between cards. It worked fine on Chrome and Firefox, 
       but in Safari, the spacing was missing.
            gap: 20px; 
        To overcome this - used margin-right:20px

    2. <input type="date"> had different UIs across browsers. In Safari and Firefox, the styling and 
        even behavior (like the date format) differed.

        For IE11 input type='date' doesn't works
        To fix this we used JavaScript libraries such as Pikaday, Flatpikr
    
    3. In an autocomplete input, event.key worked well in modern browsers, but older Edge/IE 
        required keyCode.
            const key = e.key || e.keyCode;
                if (key === 'Enter' || key === 13) {
                handleSubmit();
            }

22. display:none vs visibility:none -

    display :none -

        Element is removed from the VIEW but remains in DOM
        It takes up NO SPACE
        Other elements behave as if it doesnot exists
    
    visibility : none -

        The element is INVISIBLE from the VIEW but it takes up SPACE

23. px vs em vs rem vs % units in CSS -

    px (pixels) -

        Fixed size.
        Absolute unit, does not scale with anything else.
        Good for precise control but less flexible/responsive.

    em -

        Relative to the font-size of the current element (its parent).
        If a parent font size is 16px, 1em = 16px in the child.
        Can compound (nested elements multiply).

    rem -

        Relative to the root element's font size (<html> font size).
        Usually more predictable than em because it’s always relative to the root, not parents.

    % (percent) -

        Relative to the parent element's size (depends on the CSS property).
        Often used for width, height, padding, margin relative to parent container size.

34. Opacity vs visibility -

    opacity -

        Controls transparency level, from 0 (fully transparent) to 1 (fully opaque).
        The element still takes up space and responds to events (clicks, hover).
        Example: opacity: 0 makes it invisible but still interactive.

    visibility -

        Controls visibility state: visible or hidden.
        When hidden, element is invisible and doesn’t respond to events, but still takes space in layout.
        Unlike opacity: 0, it disables interaction.

35. picture tag -

    The <picture> tag is used to load images conditionally based on screen size, device type, 
    or image format support.

    It allows you to define multiple image sources using <source> elements with media queries or file types.

    Browser picks the best matching image automatically for faster loading, better quality, and 
    optimized performance.
    example -
        <picture>
            <source media="(max-width: 768px)" srcset="hills-small.jpg">
            <source media="(min-width: 769px)" srcset="hills-medium.avif">
            <img src="./6mbpic.jpg" alt="person">
        </picture>

36. Making website SEO friendly using HTML -
    
    1. Using semantic tags such as header, footer, aside, section, nav, article etc
    2. Use proper heading structure h1 h2 h3
    3. Add alt text to images
    4. Add meta tags inside head tag and addition of proper keywords related to the website

37. CSS Preprocessors -

    CSS Preprocessors add features to normal CSS like variables, functions , loops, nesting etc
    thus making it easier to style and more powerful
    Popular preprocessors:
        SASS (.scss files)
        LESS

38. Vendor prefixes -

    Some CSS features work differently ( or are not supported ) for different browsers, vendor prefixes 
    are added to tell the browser how to handle them

    -webkit- -> Chrome/Safari
    -moz- -> Mozila Firefox
    -ms- -> Internet Explorer
    -o- -> Opera

    * But now a days tools like Autoprefixers add prefixes during the build 
